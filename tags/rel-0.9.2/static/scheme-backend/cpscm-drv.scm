(define-record-type :cpscm__trampoline (cpscm__trampoline-create thunk) cpscm__trampoline? (text cpscm__trampoline-text cpscm__trampoline-set-text!) (thunk cpscm__trampoline-thunk))
(define-syntax cpscm__trampoline (syntax-rules () ((_ . rest) (let ((tr (cpscm__trampoline-create (lambda () . rest)))) (cpscm__trampoline-set-text! tr (quote rest)) tr))))
(define (cpscm__reduce-trampoline cc) (if (cpscm__trampoline? cc) (begin (display "Executing: ") (pretty-print (cpscm__trampoline-text cc)) (newline) (cpscm__reduce-trampoline ((cpscm__trampoline-thunk cc)))) cc))
(define (cpscm_20_boolean->combinator test) (if test (lambda (kk then else) (then kk)) (lambda (kk then else) (else kk))))
(define cpscm__normal-apply apply)
(define cpscm* (lambda (k . args) (k (apply * args))))
(define cpscm+ (lambda (k . args) (k (apply + args))))
(define cpscm- (lambda (k . args) (k (apply - args))))
(define cpscm/ (lambda (k . args) (k (apply / args))))
(define cpscm< (lambda (k . args) (k (apply < args))))
(define cpscm<= (lambda (k . args) (k (apply <= args))))
(define cpscm= (lambda (k . args) (k (apply = args))))
(define cpscm> (lambda (k . args) (k (apply > args))))
(define cpscm>= (lambda (k . args) (k (apply >= args))))
(define cpscmabs (lambda (k . args) (k (apply abs args))))
(define cpscmacos (lambda (k . args) (k (apply acos args))))
(define cpscmangle (lambda (k . args) (k (apply angle args))))
(define cpscmappend (lambda (k . args) (k (apply append args))))
(define cpscmasin (lambda (k . args) (k (apply asin args))))
(define cpscmatan (lambda (k . args) (k (apply atan args))))
(define cpscmcall-with-input-file (lambda (k . args) (k (apply call-with-input-file args))))
(define cpscmcall-with-output-file (lambda (k . args) (k (apply call-with-output-file args))))
(define cpscmcar (lambda (k . args) (k (apply car args))))
(define cpscmcdr (lambda (k . args) (k (apply cdr args))))
(define cpscmcaar (lambda (k . args) (k (apply caar args))))
(define cpscmcadr (lambda (k . args) (k (apply cadr args))))
(define cpscmcdar (lambda (k . args) (k (apply cdar args))))
(define cpscmcddr (lambda (k . args) (k (apply cddr args))))
(define cpscmcaaar (lambda (k . args) (k (apply caaar args))))
(define cpscmcaadr (lambda (k . args) (k (apply caadr args))))
(define cpscmcadar (lambda (k . args) (k (apply cadar args))))
(define cpscmcaddr (lambda (k . args) (k (apply caddr args))))
(define cpscmcdaar (lambda (k . args) (k (apply cdaar args))))
(define cpscmcdadr (lambda (k . args) (k (apply cdadr args))))
(define cpscmcddar (lambda (k . args) (k (apply cddar args))))
(define cpscmcdddr (lambda (k . args) (k (apply cdddr args))))
(define cpscmcaaaar (lambda (k . args) (k (apply caaaar args))))
(define cpscmcaaadr (lambda (k . args) (k (apply caaadr args))))
(define cpscmcaadar (lambda (k . args) (k (apply caadar args))))
(define cpscmcaaddr (lambda (k . args) (k (apply caaddr args))))
(define cpscmcadaar (lambda (k . args) (k (apply cadaar args))))
(define cpscmcadadr (lambda (k . args) (k (apply cadadr args))))
(define cpscmcaddar (lambda (k . args) (k (apply caddar args))))
(define cpscmcadddr (lambda (k . args) (k (apply cadddr args))))
(define cpscmcdaaar (lambda (k . args) (k (apply cdaaar args))))
(define cpscmcdaadr (lambda (k . args) (k (apply cdaadr args))))
(define cpscmcdadar (lambda (k . args) (k (apply cdadar args))))
(define cpscmcdaddr (lambda (k . args) (k (apply cdaddr args))))
(define cpscmcddaar (lambda (k . args) (k (apply cddaar args))))
(define cpscmcddadr (lambda (k . args) (k (apply cddadr args))))
(define cpscmcdddar (lambda (k . args) (k (apply cdddar args))))
(define cpscmcddddr (lambda (k . args) (k (apply cddddr args))))
(define cpscmceiling (lambda (k . args) (k (apply ceiling args))))
(define cpscmchar->integer (lambda (k . args) (k (apply char->integer args))))
(define cpscmchar-alphabetic? (lambda (k . args) (k (apply char-alphabetic? args))))
(define cpscmchar-ci<=? (lambda (k . args) (k (apply char-ci<=? args))))
(define cpscmchar-ci<? (lambda (k . args) (k (apply char-ci<? args))))
(define cpscmchar-ci=? (lambda (k . args) (k (apply char-ci=? args))))
(define cpscmchar-ci>=? (lambda (k . args) (k (apply char-ci>=? args))))
(define cpscmchar-ci>? (lambda (k . args) (k (apply char-ci>? args))))
(define cpscmchar-downcase (lambda (k . args) (k (apply char-downcase args))))
(define cpscmchar-lower-case? (lambda (k . args) (k (apply char-lower-case? args))))
(define cpscmchar-numeric? (lambda (k . args) (k (apply char-numeric? args))))
(define cpscmchar-ready? (lambda (k . args) (k (apply char-ready? args))))
(define cpscmchar-upcase (lambda (k . args) (k (apply char-upcase args))))
(define cpscmchar-upper-case? (lambda (k . args) (k (apply char-upper-case? args))))
(define cpscmchar-whitespace? (lambda (k . args) (k (apply char-whitespace? args))))
(define cpscmchar<=? (lambda (k . args) (k (apply char<=? args))))
(define cpscmchar<? (lambda (k . args) (k (apply char<? args))))
(define cpscmchar=? (lambda (k . args) (k (apply char=? args))))
(define cpscmchar>=? (lambda (k . args) (k (apply char>=? args))))
(define cpscmchar>? (lambda (k . args) (k (apply char>? args))))
(define cpscmclose-input-port (lambda (k . args) (k (apply close-input-port args))))
(define cpscmclose-output-port (lambda (k . args) (k (apply close-output-port args))))
(define cpscmcomplex? (lambda (k . args) (k (apply complex? args))))
(define cpscmcons (lambda (k . args) (k (apply cons args))))
(define cpscmcos (lambda (k . args) (k (apply cos args))))
(define cpscmcurrent-input-port (lambda (k . args) (k (apply current-input-port args))))
(define cpscmcurrent-output-port (lambda (k . args) (k (apply current-output-port args))))
(define cpscmdenominator (lambda (k . args) (k (apply denominator args))))
(define cpscmdisplay (lambda (k . args) (k (apply display args))))
(define cpscmeof-object? (lambda (k . args) (k (apply eof-object? args))))
(define cpscmeq? (lambda (k . args) (k (apply eq? args))))
(define cpscmequal? (lambda (k . args) (k (apply equal? args))))
(define cpscmeqv? (lambda (k . args) (k (apply eqv? args))))
(define cpscmeval (lambda (k . args) (k (apply eval args))))
(define cpscmeven? (lambda (k . args) (k (apply even? args))))
(define cpscmexact->inexact (lambda (k . args) (k (apply exact->inexact args))))
(define cpscmexact? (lambda (k . args) (k (apply exact? args))))
(define cpscmexp (lambda (k . args) (k (apply exp args))))
(define cpscmexpt (lambda (k . args) (k (apply expt args))))
(define cpscmfloor (lambda (k . args) (k (apply floor args))))
(define cpscmforce (lambda (k . args) (k (apply force args))))
(define cpscmgcd (lambda (k . args) (k (apply gcd args))))
(define cpscmimag-part (lambda (k . args) (k (apply imag-part args))))
(define cpscminexact->exact (lambda (k . args) (k (apply inexact->exact args))))
(define cpscminexact? (lambda (k . args) (k (apply inexact? args))))
(define cpscminput-port? (lambda (k . args) (k (apply input-port? args))))
(define cpscminteger->char (lambda (k . args) (k (apply integer->char args))))
(define cpscminteger? (lambda (k . args) (k (apply integer? args))))
(define cpscminteraction-environment (lambda (k . args) (k (apply interaction-environment args))))
(define cpscmlcm (lambda (k . args) (k (apply lcm args))))
(define cpscmlength (lambda (k . args) (k (apply length args))))
(define cpscmlist (lambda (k . args) (k (apply list args))))
(define cpscmlist->string (lambda (k . args) (k (apply list->string args))))
(define cpscmlist->vector (lambda (k . args) (k (apply list->vector args))))
(define cpscmlist-ref (lambda (k . args) (k (apply list-ref args))))
(define cpscmlist-tail (lambda (k . args) (k (apply list-tail args))))
(define cpscmlist? (lambda (k . args) (k (apply list? args))))
(define cpscmload (lambda (k . args) (k (apply load args))))
(define cpscmlog (lambda (k . args) (k (apply log args))))
(define cpscmmagnitude (lambda (k . args) (k (apply magnitude args))))
(define cpscmmake-polar (lambda (k . args) (k (apply make-polar args))))
(define cpscmmake-rectangular (lambda (k . args) (k (apply make-rectangular args))))
(define cpscmmake-string (lambda (k . args) (k (apply make-string args))))
(define cpscmmake-vector (lambda (k . args) (k (apply make-vector args))))
(define cpscmmax (lambda (k . args) (k (apply max args))))
(define cpscmmin (lambda (k . args) (k (apply min args))))
(define cpscmmodulo (lambda (k . args) (k (apply modulo args))))
(define cpscmnegative? (lambda (k . args) (k (apply negative? args))))
(define cpscmnewline (lambda (k . args) (k (apply newline args))))
(define cpscmnot (lambda (k . args) (k (apply not args))))
(define cpscmnull-environment (lambda (k . args) (k (apply null-environment args))))
(define cpscmnull? (lambda (k . args) (k (apply null? args))))
(define cpscmnumber->string (lambda (k . args) (k (apply number->string args))))
(define cpscmnumerator (lambda (k . args) (k (apply numerator args))))
(define cpscmodd? (lambda (k . args) (k (apply odd? args))))
(define cpscmopen-input-file (lambda (k . args) (k (apply open-input-file args))))
(define cpscmopen-output-file (lambda (k . args) (k (apply open-output-file args))))
(define cpscmoutput-port? (lambda (k . args) (k (apply output-port? args))))
(define cpscmpeek-char (lambda (k . args) (k (apply peek-char args))))
(define cpscmpositive? (lambda (k . args) (k (apply positive? args))))
(define cpscmquotient (lambda (k . args) (k (apply quotient args))))
(define cpscmrational? (lambda (k . args) (k (apply rational? args))))
(define cpscmrationalize (lambda (k . args) (k (apply rationalize args))))
(define cpscmread (lambda (k . args) (k (apply read args))))
(define cpscmread-char (lambda (k . args) (k (apply read-char args))))
(define cpscmreal-part (lambda (k . args) (k (apply real-part args))))
(define cpscmreal? (lambda (k . args) (k (apply real? args))))
(define cpscmremainder (lambda (k . args) (k (apply remainder args))))
(define cpscmreverse (lambda (k . args) (k (apply reverse args))))
(define cpscmround (lambda (k . args) (k (apply round args))))
(define cpscmscheme-report-environment (lambda (k . args) (k (apply scheme-report-environment args))))
(define cpscmset-car! (lambda (k . args) (k (apply set-car! args))))
(define cpscmset-cdr! (lambda (k . args) (k (apply set-cdr! args))))
(define cpscmsin (lambda (k . args) (k (apply sin args))))
(define cpscmsqrt (lambda (k . args) (k (apply sqrt args))))
(define cpscmstring (lambda (k . args) (k (apply string args))))
(define cpscmstring->list (lambda (k . args) (k (apply string->list args))))
(define cpscmstring->number (lambda (k . args) (k (apply string->number args))))
(define cpscmstring->symbol (lambda (k . args) (k (apply string->symbol args))))
(define cpscmstring-append (lambda (k . args) (k (apply string-append args))))
(define cpscmstring-ci<=? (lambda (k . args) (k (apply string-ci<=? args))))
(define cpscmstring-ci<? (lambda (k . args) (k (apply string-ci<? args))))
(define cpscmstring-ci=? (lambda (k . args) (k (apply string-ci=? args))))
(define cpscmstring-ci>=? (lambda (k . args) (k (apply string-ci>=? args))))
(define cpscmstring-ci>? (lambda (k . args) (k (apply string-ci>? args))))
(define cpscmstring-copy (lambda (k . args) (k (apply string-copy args))))
(define cpscmstring-fill! (lambda (k . args) (k (apply string-fill! args))))
(define cpscmstring-length (lambda (k . args) (k (apply string-length args))))
(define cpscmstring-ref (lambda (k . args) (k (apply string-ref args))))
(define cpscmstring-set! (lambda (k . args) (k (apply string-set! args))))
(define cpscmstring<=? (lambda (k . args) (k (apply string<=? args))))
(define cpscmstring<? (lambda (k . args) (k (apply string<? args))))
(define cpscmstring=? (lambda (k . args) (k (apply string=? args))))
(define cpscmstring>=? (lambda (k . args) (k (apply string>=? args))))
(define cpscmstring>? (lambda (k . args) (k (apply string>? args))))
(define cpscmsubstring (lambda (k . args) (k (apply substring args))))
(define cpscmsymbol->string (lambda (k . args) (k (apply symbol->string args))))
(define cpscmtan (lambda (k . args) (k (apply tan args))))
(define cpscmtranscript-off (lambda (k . args) (k (apply transcript-off args))))
(define cpscmtranscript-on (lambda (k . args) (k (apply transcript-on args))))
(define cpscmtruncate (lambda (k . args) (k (apply truncate args))))
(define cpscmvector (lambda (k . args) (k (apply vector args))))
(define cpscmvector->list (lambda (k . args) (k (apply vector->list args))))
(define cpscmvector-fill! (lambda (k . args) (k (apply vector-fill! args))))
(define cpscmvector-length (lambda (k . args) (k (apply vector-length args))))
(define cpscmvector-ref (lambda (k . args) (k (apply vector-ref args))))
(define cpscmvector-set! (lambda (k . args) (k (apply vector-set! args))))
(define cpscmwith-input-from-file (lambda (k . args) (k (apply with-input-from-file args))))
(define cpscmwith-output-to-file (lambda (k . args) (k (apply with-output-to-file args))))
(define cpscmwrite (lambda (k . args) (k (apply write args))))
(define cpscmwrite-char (lambda (k . args) (k (apply write-char args))))
(define cpscmzero? (lambda (k . args) (k (apply zero? args))))
(define cpscmboolean? (lambda (k . args) (k (apply boolean? args))))
(define cpscmchar? (lambda (k . args) (k (apply char? args))))
(define cpscmnumber? (lambda (k . args) (k (apply number? args))))
(define cpscmpair? (lambda (k . args) (k (apply pair? args))))
(define cpscmport? (lambda (k . args) (k (apply port? args))))
(define cpscmprocedure? (lambda (k . args) (k (apply procedure? args))))
(define cpscmstring? (lambda (k . args) (k (apply string? args))))
(define cpscmsymbol? (lambda (k . args) (k (apply symbol? args))))
(define cpscmvector? (lambda (k . args) (k (apply vector? args))))
(define cpscmcall-with-current-continuation (lambda (cpscmk cpscmf) (cpscm__trampoline ((lambda (cpscmccwinders) (cpscm__trampoline (begin (cpscm__reduce-trampoline ((lambda (g:ccwinders:212) (cpscm__trampoline (set! cpscmccwinders g:ccwinders:212))) cpscm__winders)) (cpscm__reduce-trampoline (cpscmf cpscmk (lambda (cpscm_ . cpscmxs) (cpscm__trampoline (cpscm__switch-winders (lambda (cpscm_) (cpscm__trampoline (cpscm__normal-apply cpscmk cpscmxs))) cpscmccwinders)))))))) (quote undefined)))))
(define cpscmapply (lambda (cpscmk cpscmf . cpscmargs) (cpscm__trampoline (cpscm__normal-apply cpscm__normal-apply cpscmf cpscmk cpscmargs))))
(define cpscmcall-with-values (lambda (cpscmk cpscmproducer cpscmconsummer) (cpscm__trampoline (cpscmproducer (lambda cpscmvals (cpscm__trampoline (cpscmapply cpscmk cpscmconsummer cpscmvals)))))))
(define cpscmvalues (lambda (cpscmk . cpscmthings) (cpscm__trampoline (cpscm__normal-apply cpscmk cpscmthings))))
(define cpscm__winders (quote ()))
(define cpscm__switch-winders (lambda (g:k1 cpscm_ccwinders_41) (cpscm__trampoline ((lambda (cpscm_switch_42 cpscm_loop_43) (cpscm__trampoline ((lambda (g:k10 cpscm_switch_42_tmp cpscm_loop_43_tmp) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm_switch_42 cpscm_switch_42_tmp)) (cpscm__reduce-trampoline (g:k10 (set! cpscm_loop_43 cpscm_loop_43_tmp)))))) (lambda (g5) (cpscm__trampoline (cpscmreverse (lambda (g:ret-reverse:7) (cpscm__trampoline (cpscmreverse (lambda (g:ret-reverse:8) (cpscm__trampoline (cpscm_loop_43 g:k1 g:ret-reverse:7 g:ret-reverse:8))) cpscm_ccwinders_41))) cpscm__winders))) (lambda (g:k14 cpscm_a_44 cpscm_b_45) (cpscm__trampoline ((lambda (cpscm_run-all_46) (cpscm__trampoline ((lambda (g:k25 cpscm_run-all_46_tmp) (cpscm__trampoline (g:k25 (set! cpscm_run-all_46 cpscm_run-all_46_tmp)))) (lambda (g18) (cpscm__trampoline (cpscmmap (lambda (g:ret-map:21) (cpscm__trampoline (cpscmmap (lambda (g:ret-map:22) (cpscm__trampoline (cpscmappend-reverse! (lambda (g:ret-append-reverse!:20) (cpscm__trampoline (cpscm_run-all_46 (lambda (g:ret-_run-all_46:19) (cpscm__trampoline (g:k14 (set! cpscm__winders cpscm_ccwinders_41)))) g:ret-append-reverse!:20))) g:ret-map:21 g:ret-map:22))) cpscmcar cpscm_b_45))) cpscmcdr cpscm_a_44))) (lambda (g:k28 cpscm_to-apply_47) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:31) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:30) (cpscm__trampoline (g:ret-_20_boolean->combinator:30 g:k28 (lambda (g:k33) (cpscm__trampoline (g:k33 #t))) (lambda (g:k35) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:37) (cpscm__trampoline (g:ret-car:37 (lambda (g:ret-apply:36) (cpscm__trampoline (cpscmcdr (lambda (g:ret-cdr:39) (cpscm__trampoline (cpscm_run-all_46 g:k35 g:ret-cdr:39))) cpscm_to-apply_47)))))) cpscm_to-apply_47)))))) (cpscm_20_boolean->combinator g:ret-null?:31)))) cpscm_to-apply_47)))))) (quote undefined)))) (lambda (g:k41 cpscm_a_44 cpscm_b_45) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:45) (cpscm__trampoline ((lambda (g:k55) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:57) (cpscm__trampoline (g:ret-_20_boolean->combinator:57 g:k55 (lambda (g:k59) (cpscm__trampoline (g:k59 g:ret-null?:45))) (lambda (g:k61) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:63) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:67) (cpscm__trampoline (g:ret-_20_boolean->combinator:67 g:k61 (lambda (g:k69) (cpscm__trampoline (g:k69 g:ret-null?:63))) (lambda (g:k71) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:74) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:75) (cpscm__trampoline (cpscmeq? (lambda (g:ret-eq?:73) (cpscm__trampoline (cpscmnot g:k71 g:ret-eq?:73))) g:ret-car:74 g:ret-car:75))) cpscm_b_45))) cpscm_a_44)))))) (cpscm_20_boolean->combinator g:ret-null?:63)))) cpscm_b_45)))))) (cpscm_20_boolean->combinator g:ret-null?:45)))) (lambda (g44) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:43) (cpscm__trampoline (g:ret-_20_boolean->combinator:43 g:k41 (lambda (g:k47) (cpscm__trampoline (cpscm_switch_42 g:k47 cpscm_a_44 cpscm_b_45))) (lambda (g:k50) (cpscm__trampoline (cpscmcdr (lambda (g:ret-cdr:52) (cpscm__trampoline (cpscmcdr (lambda (g:ret-cdr:53) (cpscm__trampoline (cpscm_loop_43 g:k50 g:ret-cdr:52 g:ret-cdr:53))) cpscm_b_45))) cpscm_a_44)))))) (cpscm_20_boolean->combinator g44))))))) cpscm_a_44)))))) (quote undefined) (quote undefined)))))
(define cpscmdynamic-wind (lambda (g:k77 cpscm_before_41 cpscm_thunk_42 cpscm_after_43) (cpscm__trampoline ((lambda (cpscm_result_44) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm_result_44 #f)) (cpscm__reduce-trampoline (cpscm_before_41 (lambda (g:ret-_before_41:82) (cpscm__trampoline (cpscmcons (lambda (g:ret-cons:85) (cpscm__trampoline (cpscmcons (lambda (g:ret-cons:84) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm__winders g:ret-cons:84)) (cpscm__reduce-trampoline (cpscm_thunk_42 (lambda (g:ret-_thunk_42:87) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm_result_44 g:ret-_thunk_42:87)) (cpscm__reduce-trampoline (cpscmcdr (lambda (g:ret-cdr:89) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm__winders g:ret-cdr:89)) (cpscm__reduce-trampoline (cpscm_after_43 (lambda (g:ret-_after_43:90) (cpscm__trampoline (g:k77 cpscm_result_44)))))))) cpscm__winders)))))))))) g:ret-cons:85 cpscm__winders))) cpscm_before_41 cpscm_after_43)))))))) (quote undefined)))))
(define cpscmwith-failure-continuation (lambda (g:k92 cpscm_hnd_41 cpscm_thunk_42) (cpscm__trampoline ((lambda (cpscm_oldhnd_43) (cpscm__trampoline (begin (cpscm__reduce-trampoline (set! cpscm_oldhnd_43 #f)) (cpscm__reduce-trampoline (cpscmcall/cc g:k92 (lambda (g:k99 cpscm_cc_44) (cpscm__trampoline (cpscmdynamic-wind g:k99 (lambda (g:k102) (cpscm__trampoline (cpscmcurrent-error-handler (lambda (g:ret-current-error-handler:104) (cpscm__trampoline (g:k102 (set! cpscm_oldhnd_43 g:ret-current-error-handler:104))))))) (lambda (g:k106) (cpscm__trampoline (cpscmcurrent-error-handler (lambda (g:ret-current-error-handler:107) (cpscm__trampoline (cpscm_thunk_42 g:k106))) cpscm_hnd_41 cpscm_cc_44))) (lambda (g:k110) (cpscm__trampoline (cpscmcurrent-error-handler g:k110 cpscm_oldhnd_43))))))))))) (quote undefined)))))
(define cpscmwith/fc cpscmwith-failure-continuation)
(define cpscmappend! cpscmappend)
(define cpscmappend-reverse (lambda (g:k113 cpscm_rev-head_41 cpscm_tail_42) (cpscm__trampoline (cpscmreverse (lambda (g:ret-reverse:115) (cpscm__trampoline (cpscmappend g:k113 g:ret-reverse:115 cpscm_tail_42))) cpscm_rev-head_41))))
(define cpscmappend-reverse! cpscmappend-reverse)
(define cpscmreverse! cpscmreverse)
(define cpscmmap (lambda (g:k117 cpscm_f_41 cpscm_l_42) (cpscm__trampoline ((lambda (cpscm_loop_43) (cpscm__trampoline ((lambda (g:k124 cpscm_loop_43_tmp) (cpscm__trampoline (g:k124 (set! cpscm_loop_43 cpscm_loop_43_tmp)))) (lambda (g121) (cpscm__trampoline (cpscm_loop_43 g:k117 cpscm_l_42 (quote ())))) (lambda (g:k127 cpscm_l_44 cpscm_res_45) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:130) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:129) (cpscm__trampoline (g:ret-_20_boolean->combinator:129 g:k127 (lambda (g:k132) (cpscm__trampoline (cpscmreverse! g:k132 cpscm_res_45))) (lambda (g:k135) (cpscm__trampoline (cpscmcdr (lambda (g:ret-cdr:137) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:140) (cpscm__trampoline (cpscm_f_41 (lambda (g:ret-_f_41:139) (cpscm__trampoline (cpscmcons (lambda (g:ret-cons:138) (cpscm__trampoline (cpscm_loop_43 g:k135 g:ret-cdr:137 g:ret-cons:138))) g:ret-_f_41:139 cpscm_res_45))) g:ret-car:140))) cpscm_l_44))) cpscm_l_44)))))) (cpscm_20_boolean->combinator g:ret-null?:130)))) cpscm_l_44)))))) (quote undefined)))))
(define cpscmfor-each (lambda (g:k142 cpscm_k_41 cpscm_f_42 cpscm_l_43) (cpscm__trampoline ((lambda (cpscm_loop_44) (cpscm__trampoline ((lambda (g:k149 cpscm_loop_44_tmp) (cpscm__trampoline (g:k149 (set! cpscm_loop_44 cpscm_loop_44_tmp)))) (lambda (g146) (cpscm__trampoline (cpscm_loop_44 g:k142 cpscm_l_43 (quote ())))) (lambda (g:k152 cpscm_l_45) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:155) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:154) (cpscm__trampoline (g:ret-_20_boolean->combinator:154 g:k152 (lambda (g:k157) (cpscm__trampoline (g:k157 #t))) (lambda (g:k159) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:161) (cpscm__trampoline (cpscm_f_42 (lambda (g:ret-_f_42:160) (cpscm__trampoline (cpscmcdr (lambda (g:ret-cdr:163) (cpscm__trampoline (cpscm_loop_44 g:k159 g:ret-cdr:163))) cpscm_l_45))) g:ret-car:161))) cpscm_l_45)))))) (cpscm_20_boolean->combinator g:ret-null?:155)))) cpscm_l_45)))))) (quote undefined)))))
(define cpscmassoc (lambda (g:k165 cpscm_x_41 cpscm_lis_42 . cpscm_maybe-=_43) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:169) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:168) (cpscm__trampoline (g:ret-_20_boolean->combinator:168 (lambda (g:ret-apply:167) (cpscm__trampoline (cpscmfind g:k165 (lambda (g:k174 cpscm_entry_45) (cpscm__trampoline (cpscmcar (lambda (g:ret-car:176) (cpscm__trampoline (g:ret-apply:167 g:k174 cpscm_x_41 g:ret-car:176))) cpscm_entry_45))) cpscm_lis_42))) (lambda (g:k178) (cpscm__trampoline (g:k178 cpscmequal?))) (lambda (g:k180) (cpscm__trampoline (cpscmcar g:k180 cpscm_maybe-=_43)))))) (cpscm_20_boolean->combinator g:ret-null?:169)))) cpscm_maybe-=_43))))
(define cpscmassq (lambda (g:k183 cpscm_x_41 cpscm_l_42) (cpscm__trampoline (cpscmassoc g:k183 cpscm_x_41 cpscm_l_42 cpscmeq?))))
(define cpscmassv (lambda (g:k186 cpscm_x_41 cpscm_l_42) (cpscm__trampoline (cpscmassoc g:k186 cpscm_x_41 cpscm_l_42 cpscmeqv?))))
(define cpscmmember (lambda (g:k189 cpscm_x_41 cpscm_lis_42 . cpscm_maybe-=_43) (cpscm__trampoline (cpscmnull? (lambda (g:ret-null?:193) (cpscm__trampoline ((lambda (g:ret-_20_boolean->combinator:192) (cpscm__trampoline (g:ret-_20_boolean->combinator:192 (lambda (g:ret-apply:191) (cpscm__trampoline (cpscmfind-tail g:k189 (lambda (g:k198 cpscm_y_45) (cpscm__trampoline (g:ret-apply:191 g:k198 cpscm_x_41 cpscm_y_45))) cpscm_lis_42))) (lambda (g:k201) (cpscm__trampoline (g:k201 cpscmequal?))) (lambda (g:k203) (cpscm__trampoline (cpscmcar g:k203 cpscm_maybe-=_43)))))) (cpscm_20_boolean->combinator g:ret-null?:193)))) cpscm_maybe-=_43))))
(define cpscmmemq (lambda (g:k206 cpscm_x_41 cpscm_l_42) (cpscm__trampoline (cpscmmember g:k206 cpscm_x_41 cpscm_l_42 cpscmeq?))))
(define cpscmmemv (lambda (g:k209 cpscm_x_41 cpscm_l_42) (cpscm__trampoline (cpscmmember g:k209 cpscm_x_41 cpscm_l_42 cpscmeqv?))))
(define cpscmcall/cc cpscmcall-with-current-continuation)
